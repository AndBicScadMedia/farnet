<?xml version="1.0" encoding="us-ascii"?>
<hrc version="take5"
xmlns="http://colorer.sf.net/2003/hrc"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://colorer.sf.net/2003/hrc http://colorer.sf.net/2003/hrc.xsd">

<type name="powershell">
<annotation><documentation><![CDATA[

powershell.hrc by Roman Kuzmin 2012-04-12
For PowerShell 2.0+, Colorer 1.0.3+, and optional visual.hrd
Distributed with ColorerPack: http://code.google.com/p/farnet

Add to proto.hrc:

<prototype name="powershell" group="scripts" description="PowerShell">
<filename>/\.(ps[dDmM]?1|psfconsole)$/i</filename>
<location link="..."/>
</prototype>

Regex syntax in strings after regex operators, [regex], and <#regex#>

	... -match 'RE'
	... [regex] 'RE'
	... <#regex#> 'RE'

SQL syntax in here-strings after <#sql#>

	... <#sql#> @'
	SELECT *
	FROM t1
	...
	'@

]]></documentation></annotation>

<region name="Bracket"       parent="def:Symbol"        description="{} () []."/>
<region name="Comment"       parent="def:Comment"       description="Code comments."/>
<region name="Constant"      parent="def:Constant"      description="$null, $true, $false."/>
<region name="Error"         parent="def:Error"         description="Error and warning areas."/>
<region name="HelpDirective" parent="def:CommentDoc"    description="Help comment directives."/>
<region name="Identifier"    parent="def:Identifier"/>
<region name="Keyword"       parent="def:Keyword"/>
<region name="Label"         parent="def:Label"         description=":label constructs."/>
<region name="Pipeline"      parent="def:KeywordStrong" description="Pipeline and redirection operators."/>
<region name="String"        parent="def:String"        description="Literal text in string expressions."/>
<region name="SyntaxEdge"    parent="def:StringEdge"    description="Edges of other syntax areas."/>
<region name="SystemVar"     parent="def:VarStrong"     description="System variables (automatic, preference, ...)."/>
<region name="Type"          parent="def:TypeKeyword"   description=".NET type [...]."/>
<region name="UserVar"       parent="def:Var"           description="User variables and parameters."/>
<region name="VarPrefix"     parent="def:VarStrong"     description="Variable prefixes."/>

<region name="Number"        parent="def:Number"/>
<region name="NumberDec"     parent="def:NumberDec"     description="Decimal numbers."/>
<region name="NumberHex"     parent="def:NumberHex"     description="Hexadecimal numbers."/>
<region name="NumberFloat"   parent="def:NumberFloat"   description="Floating point numbers."/>

<region name="Operator"      parent="def:Operator"      description="Operators."/>

<region name="Escape"        parent="def:StringContent" description="Escaping and escaped symbols."/>
<region name="EscapeWrap"    parent="def:KeywordStrong" description="Escaping backtick at line ends."/>
<region name="EscapeSpecial" parent="def:KeywordStrong" description="`0, `a, `b, `f, `n, `r, `t, `v."/>

<region name="LogStart"      parent="def:OpenTag"       description="Log start."/>
<region name="LogText"       parent="def:Text"          description="Log text."/>
<region name="LogEnd"        parent="def:CloseTag"      description="Log end."/>
<region name="LogError"      parent="def:Error"         description="Log error text."/>
<region name="LogDebug"      parent="def:Debug"         description="Log debug text."/>
<region name="LogVerbose"    parent="def:Comment"       description="Log verbose text."/>
<region name="LogWarning"    parent="def:StringContent" description="Log warning text."/>

<region name="start" parent="def:PairStart"/>
<region name="end" parent="def:PairEnd"/>

<entity name="e-block" value="(\s*(?:\{|$)|\s+&lt;?#)?="/>
<entity name="e-func" value="(\s*(?:[\(\{]|$)|\s+&lt;?#)?="/>
<entity name="e-paren" value="(\s*(?:\(|$)|\s+&lt;?#)?="/>
<entity name="n-simple" value="\D?=\w+"/>
<entity name="s-assign" value="(?:^|[;\{}()=]?#1)\s*"/>
<entity name="s-common" value="(?:^|[;\{}()]?#1)\s*"/>
<entity name="s-else" value="(?:^|\}?#1)\s*"/>
<entity name="s-rem" value="(?:^|[\s,;=()\{}\[\]'&#34;]?#1)"/>
<entity name="var" value="\w[\w\?]*"/>

<entity name="s-label" value="%s-assign;((?{Label}:%n-simple;)\s+)?"/>

<scheme name="Escape">
	<regexp match="/(?{EscapeSpecial}`[0abfnrtv])/"/>
	<regexp match="/(?{EscapeWrap}`)(?{Error}\s+)?$/"/>
	<regexp match="/(?{Escape}`.)/"/>
</scheme>

<scheme name="_type">
	<regexp match="/(?:~|^)\s*%n-simple;([.+]%n-simple;)*/"/>
	<block scheme="_type" start="/(?{start}\[)/" end="/(?{end}\])/"/>
	<block scheme="expression" start="/(?{start}\()/" end="/(?{end}\))/"/>
</scheme>
<scheme name="type-block">
	<block scheme="_type" region="Type"
	start="/(?{start}\[)\s*\M%n-simple;/" end="/(?{end}\])/"/>
</scheme>

<scheme name="UserVar">
	<!--global:x =-->
	<regexp match="/(?{UserVar}(?{def:Outlined}\$(?{VarPrefix}(?:global|script):)%var;))\s*(?{Operator}=)/i"/>

	<!--$x[:x]-->
	<regexp match="/(?{UserVar}[$@](?:(?{VarPrefix}\w+::?!))?(%var;(?:::?!)?)+)/"/>

	<!--${..}-->
	<block scheme="Escape" region="UserVar"
	start="/(?{start}\$\{)/" end="/(?{end}\})/"/>
</scheme>

<scheme name="AutoVar">
	<!--System constant-->
	<keywords ignorecase="yes" region="Constant">
		<word name="$false"/>
		<word name="$null"/>
		<word name="$true"/>
	</keywords>

	<!--System variable-->
	<keywords ignorecase="yes" region="SystemVar">
		<!--Host-->
		<word name="$Far"/>
		<word name="$Psf"/>
		<word name="$psISE"/>

		<!--Automatic-->
		<word name="$$"/>
		<word name="$?"/>
		<word name="$^"/>
		<word name="$_"/>
		<word name="$Args"/>
		<word name="$ConsoleFileName"/>
		<word name="$Error"/>
		<word name="$Event"/>
		<word name="$EventSubscriber"/>
		<word name="$ExecutionContext"/>
		<word name="$ForEach"/>
		<word name="$HOME"/>
		<word name="$Host"/>
		<word name="$Input"/>
		<word name="$LastExitCode"/>
		<word name="$Matches"/>
		<word name="$MyInvocation"/>
		<word name="$NestedPromptLevel"/>
		<word name="$PID"/>
		<word name="$Profile"/>
		<word name="$PSBoundParameters"/>
		<word name="@PSBoundParameters"/>
		<word name="$PSCmdlet"/>
		<word name="$PSCulture"/>
		<word name="$PSDebugContext"/>
		<word name="$PSHOME"/>
		<word name="$PSItem"/>
		<word name="$PSScriptRoot"/>
		<word name="$PSSenderInfo"/>
		<word name="$PSUICulture"/>
		<word name="$PSVersionTable"/>
		<word name="$PWD"/>
		<word name="$ReportErrorShowExceptionClass"/>
		<word name="$ReportErrorShowInnerException"/>
		<word name="$ReportErrorShowSource"/>
		<word name="$ReportErrorShowStackTrace"/>
		<word name="$Sender"/>
		<word name="$ShellID"/>
		<word name="$SourceArgs"/>
		<word name="$SourceEventArgs"/>
		<word name="$StackTrace"/>
		<word name="$This"/>

		<!--Preference-->
		<word name="$ConfirmPreference"/>
		<word name="$DebugPreference"/>
		<word name="$ErrorActionPreference"/>
		<word name="$ErrorView"/>
		<word name="$FormatEnumerationLimit"/>
		<word name="$LogCommandHealthEvent"/>
		<word name="$LogCommandLifecycleEvent"/>
		<word name="$LogEngineHealthEvent"/>
		<word name="$LogEngineLifecycleEvent"/>
		<word name="$LogProviderLifecycleEvent"/>
		<word name="$LogProviderHealthEvent"/>
		<word name="$MaximumAliasCount"/>
		<word name="$MaximumDriveCount"/>
		<word name="$MaximumErrorCount"/>
		<word name="$MaximumFunctionCount"/>
		<word name="$MaximumHistoryCount"/>
		<word name="$MaximumVariableCount"/>
		<word name="$OFS"/>
		<word name="$OutputEncoding"/>
		<word name="$ProgressPreference"/>
		<word name="$PSDefaultParameterValues"/>
		<word name="$PSEmailServer"/>
		<word name="$PSSessionApplicationName"/>
		<word name="$PSSessionConfigurationName"/>
		<word name="$PSSessionOption"/>
		<word name="$VerbosePreference"/>
		<word name="$WarningPreference"/>
		<word name="$WhatIfPreference"/>
	</keywords>
</scheme>

<scheme name="Var">
	<inherit scheme="AutoVar"/>
	<inherit scheme="UserVar"/>
</scheme>

<!--''-->
<scheme name="InApos1">
	<regexp match="/(?{Escape}'')/"/>
</scheme>

<!--"", @""@-->
<scheme name="InQuot2">
	<inherit scheme="Escape"/>
	<inherit scheme="AutoVar"/>
	<inherit scheme="UserVar"/>
	<inherit scheme="subexpr-block"/>
</scheme>

<!--""-->
<scheme name="InQuot1">
	<regexp match="/(?{Escape}&#34;&#34;)/"/>
	<inherit scheme="InQuot2"/>
</scheme>

<!--@()-->
<scheme name="Array">
	<block scheme="expression"
	start="/(?{start}(?{Bracket}\@\())/" end="/(?{end}(?{Bracket}\)))/"/>
</scheme>

<!--@{}-->
<scheme name="Hash">
	<block scheme="expression"
	start="/(?{start}(?{Bracket}\@\{))/" end="/(?{end}(?{Bracket}\}))/"/>
</scheme>

<!--Number-->
<entity name="numexp" value="(?:[eE][\-+]?\d+)"/>
<entity name="numsuf" value="(?:[DdLl]?(?:KB|MB|GB|TB|PB)?)"/>
<scheme name="Number">
	<regexp match="/(?{NumberFloat}\B\.?~1\.\d+%numexp;?%numsuf;\b)/i"/>
	<regexp match="/(?{NumberFloat}\b\d+\.\.?!\d*(?:%numexp;?%numsuf;\b|\B))/i"/>
	<regexp match="/(?{NumberFloat}\b\d+%numexp;%numsuf;\b)/i"/>
	<regexp match="/(?{NumberHex}\b0[xX][\da-fA-F]+%numsuf;\b)/i"/>
	<regexp match="/(?{NumberDec}\b\d+%numsuf;\b)/i"/>
</scheme>

<!--RE-->

<scheme name="REApos1">
	<inherit scheme="InApos1"/>
	<inherit scheme="regexp:pcre.regexp"/>
</scheme>

<scheme name="REApos2">
	<inherit scheme="regexp:pcre.regexp"/>
</scheme>

<scheme name="REQuot1">
	<inherit scheme="InQuot1"/>
	<inherit scheme="regexp:pcre.regexp"/>
</scheme>

<scheme name="REQuot2">
	<inherit scheme="InQuot2"/>
	<inherit scheme="regexp:pcre.regexp"/>
</scheme>

<!--SQL-->

<!--"''"-->
<scheme name="InBoth">
	<inherit scheme="InApos1"/>
	<inherit scheme="InQuot2"/>
</scheme>

<scheme name="SqlQuot2">
	<block scheme="InBoth" region="String"
	start="/(?{start}')/" end="/(?{end}')/"/>

	<inherit scheme="InQuot2"/>
	<inherit scheme="sql:sql"/>
</scheme>

<scheme name="ExtraComment">
	<!--[regex]@''@, <#regex#>@''@-->
	<block scheme="REApos2" region="String" inner-region="yes"
	start="/(?{start}(?:(?{Type}\[regex\])|(?{Comment}%s-rem;&lt;#regex#&gt;))\s*(?{SyntaxEdge}@'$))/i" end="/(?{end}(?{SyntaxEdge}^'@))/"/>

	<!--[regex]'', <#regex#>''-->
	<block scheme="REApos1" region="String" inner-region="yes"
	start="/(?{start}(?:(?{Type}\[regex\])|(?{Comment}%s-rem;&lt;#regex#&gt;))\s*(?{SyntaxEdge}'))/i" end="/(?{end}(?{SyntaxEdge}'))/"/>

	<!--[regex]@""@, <#regex#>@""@-->
	<block scheme="REQuot2" region="String" inner-region="yes"
	start="/(?{start}(?:(?{Type}\[regex\])|(?{Comment}%s-rem;&lt;#regex#&gt;))\s*(?{SyntaxEdge}@&#34;$))/i" end="/(?{end}(?{SyntaxEdge}^&#34;@))/"/>

	<!--[regex]"", <#regex#>""-->
	<block scheme="REQuot1" region="String" inner-region="yes"
	start="/(?{start}(?:(?{Type}\[regex\])|(?{Comment}%s-rem;&lt;#regex#&gt;))\s*(?{SyntaxEdge}&#34;))/i" end="/(?{end}(?{SyntaxEdge}&#34;))/"/>

	<!--<#sql#>@''@-->
	<block scheme="sql:sql" content-priority="low"
	start="/(?{start}(?{Comment}%s-rem;&lt;#sql#&gt;)\s*(?{SyntaxEdge}@'$))/i" end="/(?{end}(?{SyntaxEdge}^'@))/"/>

	<!--<#sql#>@""@-->
	<block scheme="SqlQuot2" content-priority="low"
	start="/(?{start}(?{Comment}%s-rem;&lt;#sql#&gt;)\s*(?{SyntaxEdge}@&#34;$))/i" end="/(?{end}(?{SyntaxEdge}^&#34;@))/"/>
</scheme>

<scheme name="Comment">
	<regexp match="/(?:^|~)\s*(?{HelpDirective}\.(?:SYNOPSIS|DESCRIPTION|INPUTS|OUTPUTS|NOTES|EXAMPLE|LINK|COMPONENT|ROLE|FUNCTIONALITY))\s*$/i"/>
	<regexp match="/(?:^|~)\s*(?{HelpDirective}\.(?:PARAMETER|FORWARDHELPTARGETNAME|FORWARDHELPCATEGORY|REMOTEHELPRUNSPACE|EXTERNALHELP))\s+(?{UserVar}.+)$/i"/>
	<inherit scheme="def:Comment"/>
</scheme>

<scheme name="LineComment">
	<regexp match="/(?{Comment}%s-rem;(?{def:Outlined}#{3}#?!.*))/"/>
	<block scheme="Comment" region="Comment" start="/%s-rem;#+/" end="/$/"/>
</scheme>

<scheme name="BlockComment">
	<block scheme="Comment" region="Comment" start="/(?{start}%s-rem;&lt;#)/" end="/(?{end}#&gt;)/"/>
</scheme>

<scheme name="base">
	<inherit scheme="LineComment"/>
	<inherit scheme="BlockComment"/>
</scheme>

<!--<==>-->
<scheme name="log">
	<regexp match="/(?{LogError}^ERROR(?::|\b)|\&lt;\&lt;\&lt;\&lt;(?:\s|$))/"/>
	<regexp match="/^\+\s+(?{LogError}\~+)\s*$/"/>
	<regexp match="/(?{LogDebug}^DEBUG\b.*$)/"/>
	<regexp match="/(?{LogVerbose}^VERBOSE\b.*$)/"/>
	<regexp match="/(?{LogWarning}^WARNING\b.*$)/"/>

	<!--Time+-->
	<regexp match="/(?{def:Time}\b\d{1,2}:\d{1,2}(?::\d{1,2}(?:\.\d+)?)?\b)/"/>

	<!--Date+-->
	<regexp match="/(?{def:Date}\b\d+[\/\-]\d+[\/\-]\d+\b)/"/>

	<!--d.d.d-->
	<regexp match="/(?{Number}\b[0-9]+[.0-9]*\b)/"/>

	<inherit scheme="def:Path"/>
	<inherit scheme="Number"/>
</scheme>
<scheme name="log-block">
	<block scheme="log" region="LogText"
	start="/(?{start}(?{LogStart}^&lt;=$))/" end="/(?{end}(?{LogEnd}^=&gt;$))/"/>
</scheme>

<scheme name="Cmdlet">
	<keywords ignorecase="yes" region="Keyword" worddiv="[\s\(\)\{\};=|]">
		<word name="Add-Computer"/>
		<word name="Add-Content"/>
		<word name="Add-History"/>
		<word name="Add-Member"/>
		<word name="Add-PSSnapin"/>
		<word name="Add-Type"/>
		<word name="Checkpoint-Computer"/>
		<word name="Clear-Content"/>
		<word name="Clear-EventLog"/>
		<word name="Clear-History"/>
		<word name="Clear-Item"/>
		<word name="Clear-ItemProperty"/>
		<word name="Clear-Variable"/>
		<word name="Compare-Object"/>
		<word name="Complete-Transaction"/>
		<word name="Connect-WSMan"/>
		<word name="ConvertFrom-Csv"/>
		<word name="ConvertFrom-SecureString"/>
		<word name="ConvertFrom-StringData"/>
		<word name="Convert-Path"/>
		<word name="ConvertTo-Csv"/>
		<word name="ConvertTo-Html"/>
		<word name="ConvertTo-SecureString"/>
		<word name="ConvertTo-Xml"/>
		<word name="Copy-Item"/>
		<word name="Copy-ItemProperty"/>
		<word name="Debug-Process"/>
		<word name="Disable-ComputerRestore"/>
		<word name="Disable-PSBreakpoint"/>
		<word name="Disable-PSSessionConfiguration"/>
		<word name="Disable-WSManCredSSP"/>
		<word name="Disconnect-WSMan"/>
		<word name="Enable-ComputerRestore"/>
		<word name="Enable-PSBreakpoint"/>
		<word name="Enable-PSRemoting"/>
		<word name="Enable-PSSessionConfiguration"/>
		<word name="Enable-WSManCredSSP"/>
		<word name="Enter-PSSession"/>
		<word name="Exit-PSSession"/>
		<word name="Export-Alias"/>
		<word name="Export-Clixml"/>
		<word name="Export-Console"/>
		<word name="Export-Counter"/>
		<word name="Export-Csv"/>
		<word name="Export-FormatData"/>
		<word name="Export-ModuleMember"/>
		<word name="Export-PSSession"/>
		<word name="ForEach-Object"/>
		<word name="Format-Custom"/>
		<word name="Format-List"/>
		<word name="Format-Table"/>
		<word name="Format-Wide"/>
		<word name="Get-Acl"/>
		<word name="Get-Alias"/>
		<word name="Get-AuthenticodeSignature"/>
		<word name="Get-ChildItem"/>
		<word name="Get-Command"/>
		<word name="Get-ComputerRestorePoint"/>
		<word name="Get-Content"/>
		<word name="Get-Counter"/>
		<word name="Get-Credential"/>
		<word name="Get-Culture"/>
		<word name="Get-Date"/>
		<word name="Get-Event"/>
		<word name="Get-EventLog"/>
		<word name="Get-EventSubscriber"/>
		<word name="Get-ExecutionPolicy"/>
		<word name="Get-FormatData"/>
		<word name="Get-Help"/>
		<word name="Get-History"/>
		<word name="Get-Host"/>
		<word name="Get-HotFix"/>
		<word name="Get-Item"/>
		<word name="Get-ItemProperty"/>
		<word name="Get-Job"/>
		<word name="Get-Location"/>
		<word name="Get-Member"/>
		<word name="Get-Module"/>
		<word name="Get-PfxCertificate"/>
		<word name="Get-Process"/>
		<word name="Get-PSBreakpoint"/>
		<word name="Get-PSCallStack"/>
		<word name="Get-PSDrive"/>
		<word name="Get-PSProvider"/>
		<word name="Get-PSSession"/>
		<word name="Get-PSSessionConfiguration"/>
		<word name="Get-PSSnapin"/>
		<word name="Get-Random"/>
		<word name="Get-Service"/>
		<word name="Get-TraceSource"/>
		<word name="Get-Transaction"/>
		<word name="Get-UICulture"/>
		<word name="Get-Unique"/>
		<word name="Get-Variable"/>
		<word name="Get-WinEvent"/>
		<word name="Get-WmiObject"/>
		<word name="Get-WSManCredSSP"/>
		<word name="Get-WSManInstance"/>
		<word name="Group-Object"/>
		<word name="Import-Alias"/>
		<word name="Import-Clixml"/>
		<word name="Import-Counter"/>
		<word name="Import-Csv"/>
		<word name="Import-LocalizedData"/>
		<word name="Import-Module"/>
		<word name="Import-PSSession"/>
		<word name="Invoke-Command"/>
		<word name="Invoke-Expression"/>
		<word name="Invoke-History"/>
		<word name="Invoke-Item"/>
		<word name="Invoke-WMIMethod"/>
		<word name="Invoke-WSManAction"/>
		<word name="Join-Path"/>
		<word name="Limit-EventLog"/>
		<word name="Measure-Command"/>
		<word name="Measure-Object"/>
		<word name="Move-Item"/>
		<word name="Move-ItemProperty"/>
		<word name="New-Alias"/>
		<word name="New-Event"/>
		<word name="New-EventLog"/>
		<word name="New-Item"/>
		<word name="New-ItemProperty"/>
		<word name="New-Module"/>
		<word name="New-ModuleManifest"/>
		<word name="New-Object"/>
		<word name="New-PSDrive"/>
		<word name="New-PSSession"/>
		<word name="New-PSSessionOption"/>
		<word name="New-Service"/>
		<word name="New-TimeSpan"/>
		<word name="New-Variable"/>
		<word name="New-WebServiceProxy"/>
		<word name="New-WSManInstance"/>
		<word name="New-WSManSessionOption"/>
		<word name="Out-Default"/>
		<word name="Out-File"/>
		<word name="Out-GridView"/>
		<word name="Out-Host"/>
		<word name="Out-Null"/>
		<word name="Out-Printer"/>
		<word name="Out-String"/>
		<word name="Pop-Location"/>
		<word name="Push-Location"/>
		<word name="Read-Host"/>
		<word name="Receive-Job"/>
		<word name="Register-EngineEvent"/>
		<word name="Register-ObjectEvent"/>
		<word name="Register-PSSessionConfiguration"/>
		<word name="Register-WmiEvent"/>
		<word name="Remove-Computer"/>
		<word name="Remove-Event"/>
		<word name="Remove-EventLog"/>
		<word name="Remove-Item"/>
		<word name="Remove-ItemProperty"/>
		<word name="Remove-Job"/>
		<word name="Remove-Module"/>
		<word name="Remove-PSBreakpoint"/>
		<word name="Remove-PSDrive"/>
		<word name="Remove-PSSession"/>
		<word name="Remove-PSSnapin"/>
		<word name="Remove-Variable"/>
		<word name="Remove-WMIObject"/>
		<word name="Remove-WSManInstance"/>
		<word name="Rename-Item"/>
		<word name="Rename-ItemProperty"/>
		<word name="Reset-ComputerMachinePassword"/>
		<word name="Resolve-Path"/>
		<word name="Restart-Computer"/>
		<word name="Restart-Service"/>
		<word name="Restore-Computer"/>
		<word name="Resume-Service"/>
		<word name="Select-Object"/>
		<word name="Select-String"/>
		<word name="Select-Xml"/>
		<word name="Send-MailMessage"/>
		<word name="Set-Acl"/>
		<word name="Set-Alias"/>
		<word name="Set-AuthenticodeSignature"/>
		<word name="Set-Content"/>
		<word name="Set-Date"/>
		<word name="Set-ExecutionPolicy"/>
		<word name="Set-Item"/>
		<word name="Set-ItemProperty"/>
		<word name="Set-Location"/>
		<word name="Set-PSBreakpoint"/>
		<word name="Set-PSDebug"/>
		<word name="Set-PSSessionConfiguration"/>
		<word name="Set-Service"/>
		<word name="Set-StrictMode"/>
		<word name="Set-TraceSource"/>
		<word name="Set-Variable"/>
		<word name="Set-WMIInstance"/>
		<word name="Set-WSManInstance"/>
		<word name="Set-WSManQuickConfig"/>
		<word name="Show-EventLog"/>
		<word name="Sort-Object"/>
		<word name="Split-Path"/>
		<word name="Start-Job"/>
		<word name="Start-Process"/>
		<word name="Start-Service"/>
		<word name="Start-Sleep"/>
		<word name="Start-Transaction"/>
		<word name="Start-Transcript"/>
		<word name="Stop-Computer"/>
		<word name="Stop-Job"/>
		<word name="Stop-Process"/>
		<word name="Stop-Service"/>
		<word name="Stop-Transcript"/>
		<word name="Suspend-Service"/>
		<word name="Tee-Object"/>
		<word name="Test-ComputerSecureChannel"/>
		<word name="Test-Connection"/>
		<word name="Test-ModuleManifest"/>
		<word name="Test-Path"/>
		<word name="Test-WSMan"/>
		<word name="Trace-Command"/>
		<word name="Undo-Transaction"/>
		<word name="Unregister-Event"/>
		<word name="Unregister-PSSessionConfiguration"/>
		<word name="Update-FormatData"/>
		<word name="Update-List"/>
		<word name="Update-TypeData"/>
		<word name="Use-Transaction"/>
		<word name="Wait-Event"/>
		<word name="Wait-Job"/>
		<word name="Wait-Process"/>
		<word name="Where-Object"/>
		<word name="Write-Debug"/>
		<word name="Write-Error"/>
		<word name="Write-EventLog"/>
		<word name="Write-Host"/>
		<word name="Write-Output"/>
		<word name="Write-Progress"/>
		<word name="Write-Verbose"/>
		<word name="Write-Warning"/>

		<!--PSF cmdlet-->
		<word name="Assert-Far"/>
		<word name="Find-FarFile"/>
		<word name="Get-FarFile"/>
		<word name="Get-FarItem"/>
		<word name="Get-FarPath"/>
		<word name="Invoke-FarStepper"/>
		<word name="New-FarEditor"/>
		<word name="New-FarFile"/>
		<word name="New-FarItem"/>
		<word name="New-FarList"/>
		<word name="New-FarMenu"/>
		<word name="New-FarViewer"/>
		<word name="Open-FarEditor"/>
		<word name="Open-FarPanel"/>
		<word name="Open-FarViewer"/>
		<word name="Out-FarList"/>
		<word name="Out-FarPanel"/>
		<word name="Search-FarFile"/>
		<word name="Show-FarMessage"/>
		<word name="Start-FarJob"/>

		<!--FarDescription cmdlet-->
		<word name="Update-FarDescription"/>
	</keywords>
</scheme>

<scheme name="Separator">
	<regexp match="/(?{Error};)(?:\s*$|\s*\}|\s+#)/"/>
	<keywords region="Operator">
		<symb name=","/>
		<symb name=";"/>
	</keywords>
</scheme>

<scheme name="Pipeline">
	<keywords region="Error">
		<symb name="&amp;&amp;"/>
		<symb name="||"/>
		<word name="&lt;"/>
		<word name="1&gt;&amp;2"/>
	</keywords>
	<keywords region="Operator">
		<symb name="&amp;"/>
	</keywords>
	<keywords region="Pipeline">
		<symb name="|"/>
		<symb name="&gt;&gt;"/>
		<symb name="&gt;"/>
		<symb name="2&gt;&amp;1"/>
		<symb name="2&gt;&gt;"/>
		<symb name="2&gt;"/>
		<symb name="3&gt;&amp;1"/>
		<symb name="3&gt;&gt;"/>
		<symb name="3&gt;"/>
		<symb name="4&gt;&amp;1"/>
		<symb name="4&gt;&gt;"/>
		<symb name="4&gt;"/>
		<symb name="5&gt;&amp;1"/>
		<symb name="5&gt;&gt;"/>
		<symb name="5&gt;"/>
		<symb name="*&gt;&amp;1"/>
		<symb name="*&gt;&gt;"/>
		<symb name="*&gt;"/>
	</keywords>
</scheme>

<scheme name="WOperator">
	<keywords ignorecase="yes" region="Operator">
		<word name="-eq"/>
		<word name="-ne"/>
		<word name="-ge"/>
		<word name="-gt"/>
		<word name="-lt"/>
		<word name="-le"/>
		<word name="-like"/>
		<word name="-notlike"/>
		<word name="-match"/>
		<word name="-notmatch"/>
		<word name="-replace"/>
		<word name="-contains"/>
		<word name="-notcontains"/>
		<word name="-ieq"/>
		<word name="-ine"/>
		<word name="-ige"/>
		<word name="-igt"/>
		<word name="-ile"/>
		<word name="-ilt"/>
		<word name="-ilike"/>
		<word name="-inotlike"/>
		<word name="-imatch"/>
		<word name="-inotmatch"/>
		<word name="-ireplace"/>
		<word name="-icontains"/>
		<word name="-inotcontains"/>
		<word name="-ceq"/>
		<word name="-cne"/>
		<word name="-cge"/>
		<word name="-cgt"/>
		<word name="-clt"/>
		<word name="-cle"/>
		<word name="-clike"/>
		<word name="-cnotlike"/>
		<word name="-cmatch"/>
		<word name="-cnotmatch"/>
		<word name="-creplace"/>
		<word name="-ccontains"/>
		<word name="-cnotcontains"/>
		<word name="-is"/>
		<word name="-isnot"/>
		<word name="-as"/>
		<word name="-and"/>
		<word name="-not"/>
		<word name="-or"/>
		<word name="-xor"/>
		<word name="-band"/>
		<word name="-bor"/>
		<word name="-bnot"/>
		<word name="-bxor"/>
		<word name="-f"/>
		<word name="-join"/>
		<word name="-split"/>
		<word name="-csplit"/>
		<word name="-isplit"/>
	</keywords>
</scheme>

<scheme name="SOperator">
	<keywords region="Operator">
		<symb name="--"/>
		<symb name="%="/>
		<symb name="*="/>
		<symb name=".."/>
		<symb name="/="/>
		<symb name="::"/>
		<symb name="++"/>
		<symb name="+="/>
		<symb name="-="/>
		<symb name="!"/>
		<symb name="%"/>
		<symb name="*"/>
		<symb name="/"/>
		<symb name="+"/>
		<symb name="="/>
	</keywords>
</scheme>

<scheme name="code-block">
	<block start="/(?{start}(?{Bracket}\{))/" end="/(?{end}(?{Bracket}\}))/" scheme="code"/>
</scheme>

<scheme name="subexpr-block">
	<block start="/(?{start}(?{Bracket}\$\())/" end="/(?{end}(?{Bracket}\)))/" scheme="code"/>
</scheme>

<scheme name="script-block">
	<block start="/(?{start}(?{Bracket}\{))/" end="/(?{end}(?{Bracket}\}))/" scheme="powershell"/>
</scheme>

<scheme name="paren-block">
	<block start="/(?{start}(?{Bracket}\())/" end="/(?{end}(?{Bracket}\)))/" scheme="expression"/>
</scheme>

<scheme name="index-block">
	<block start="/(?{start}(?{Bracket}\[))/" end="/(?{end}(?{Bracket}\]))/" scheme="expression"/>
</scheme>

<scheme name="__code">
	<inherit scheme="code-block"/>
	<inherit scheme="base"/>
</scheme>

<scheme name="__paren">
	<inherit scheme="paren-block"/>
	<inherit scheme="base"/>
</scheme>

<scheme name="__paren_code">
	<inherit scheme="paren-block"/>
	<inherit scheme="code-block"/>
	<inherit scheme="base"/>
</scheme>

<scheme name="__paren_code2">
	<inherit scheme="paren-block"/>
	<inherit scheme="code-block"/>
	<inherit scheme="expression"/>
</scheme>

<scheme name="__paren_script">
	<inherit scheme="paren-block"/>
	<inherit scheme="script-block"/>
	<inherit scheme="base"/>
</scheme>

<scheme name="__type_code">
	<inherit scheme="code-block"/>
	<inherit scheme="type-block"/>
	<inherit scheme="base"/>
	<keywords region="Operator">
		<symb name=","/>
	</keywords>
</scheme>

<scheme name="param-block">
	<block scheme="__paren"
	start="/(?:^|\{?#1)\s*(?{start}(?{Keyword}param))\b/i" end="/(?{end}\))?#1/"/>
</scheme>

<scheme name="named-block">
	<block scheme="__code"
	start="/(?:^|[\{})]?#1)\s*(?{start}(?{Keyword}process|begin|end|dynamicparam))%e-block;/i" end="/(?{end}\})?#1/"/>
</scheme>

<scheme name="function-block">
	<block scheme="__paren_script"
	start="/%s-common;(?{start}(?{Keyword}function|filter|workflow))\s+(?{def:Outlined}(?{Identifier}[^\s$()\{}][^\s()\{}]*|\$\B))%e-func;/i"
	end="/(?{end}\})?#1/"/>
</scheme>

<scheme name="else-block">
	<block scheme="__code"
	start="/%s-else;(?{start}(?{Keyword}else))%e-block;/i" end="/(?{end}\})?#1/"/>
</scheme>

<scheme name="if-block">
	<block scheme="__paren_code"
	start="/%s-assign;(?{start}(?{Keyword}if))%e-paren;/i" end="/(?{end}\})?#1/"/>
</scheme>

<scheme name="elseif-block">
	<block scheme="__paren_code"
	start="/%s-else;(?{start}(?{Keyword}elseif))%e-paren;/i" end="/(?{end}\})?#1/"/>
</scheme>

<scheme name="try-finally-block">
	<block scheme="__code"
	start="/%s-common;(?{start}(?{Keyword}try|finally))%e-block;/i" end="/(?{end}\})?#1/"/>
</scheme>

<scheme name="catch-trap-block">
	<block scheme="__type_code"
	start="/%s-common;(?{start}(?{Keyword}catch|trap))(?:%e-block;|(?:\s*\[)?=)/i" end="/(?{end}\})?#1/"/>
</scheme>

<scheme name="for-while-block">
	<block scheme="__paren_code"
	start="/%s-label;(?{start}(?{Keyword}for|while))%e-paren;/i" end="/(?{end}\})?#1/"/>
</scheme>

<scheme name="foreach-paren">
	<block scheme="Var" start="/~/" end="/\b\M(?{Keyword}in)\b/i"/>
	<block scheme="expression" start="/\bin\b/i" end="/\)?=/"/>
</scheme>
<scheme name="__foreach">
	<block scheme="foreach-paren" start="/(?{start}(?{Bracket}\())/" end="/(?{end}(?{Bracket}\)))/"/>
	<inherit scheme="code-block"/>
	<inherit scheme="base"/>
</scheme>
<scheme name="foreach-block">
	<block scheme="__foreach"
	start="/%s-label;(?{start}(?{Keyword}foreach))%e-paren;/i" end="/(?{end}\})?#1/"/>
</scheme>

<scheme name="__do">
	<inherit scheme="code-block"/>
	<block scheme="__paren" start="/(?{start}(?{Keyword}while|until))%e-paren;/i" end="/(?{end}\))?#1/"/>
	<inherit scheme="base"/>
</scheme>
<scheme name="do-block">
	<block scheme="__do"
	start="/%s-label;(?{start}(?{Keyword}do))%e-block;/i" end="/(?{end}\))?#1/"/>
</scheme>

<scheme name="data-block">
	<block scheme="__paren_code2"
	start="/%s-assign;(?{start}(?{Keyword}data))(?:\s+(?{def:Outlined}(?{Identifier}%n-simple;)))?(\s*\{|\s+-\w)?=/i" end="/(?{end}\})?#1/"/>
</scheme>

<scheme name="switch-block">
	<block scheme="__paren_code2"
	start="/%s-label;(?{start}(?{Keyword}switch))(%e-paren;|\s+-\w)?=/i" end="/(?{end}\})?#1/"/>
</scheme>

<scheme name="ps1">
	<inherit scheme="LineComment"/>
	<inherit scheme="ExtraComment"/>
	<inherit scheme="BlockComment"/>

	<!--op @'RE'@-->
	<block scheme="REApos2" region="String" inner-region="yes"
	start="/(?{start}(?{Keyword}-[cCiI]?(?:match|notmatch|replace))\s+(?{SyntaxEdge}@'$))/i" end="/(?{end}(?{SyntaxEdge}^'@))/"/>

	<!--op 'RE'-->
	<block scheme="REApos1" region="String" inner-region="yes"
	start="/(?{start}(?{Keyword}-[cCiI]?(?:match|notmatch|replace))\s+(?{SyntaxEdge}'))/i" end="/(?{end}(?{SyntaxEdge}'))/"/>

	<!--op @"RE"@-->
	<block scheme="REQuot2" region="String" inner-region="yes"
	start="/(?{start}(?{Keyword}-[cCiI]?(?:match|notmatch|replace))\s+(?{SyntaxEdge}@&#34;$))/i" end="/(?{end}(?{SyntaxEdge}^&#34;@))/"/>

	<!--op "RE"-->
	<block scheme="REQuot1" region="String" inner-region="yes"
	start="/(?{start}(?{Keyword}-[cCiI]?(?:match|notmatch|replace))\s+(?{SyntaxEdge}&#34;))/i" end="/(?{end}(?{SyntaxEdge}&#34;))/"/>

	<!--@''@-->
	<block scheme="def:empty" region="String"
	start="/(?{start}@')(?{Error}.+)?$/" end="/(?{end}^'@)/"/>

	<!--''-->
	<block scheme="InApos1" region="String"
	start="/(?{start}')/" end="/(?{end}')/"/>

	<inherit scheme="Escape"/>

	<inherit scheme="subexpr-block"/>

	<inherit scheme="Array"/>

	<inherit scheme="Hash"/>

	<!--@""@-->
	<block scheme="InQuot2" region="String"
	start="/(?{start}@&#34;)(?{Error}.+)?$/" end="/(?{end}^&#34;@)/"/>

	<!--""-->
	<block scheme="InQuot1" region="String"
	start="/(?{start}&#34;)/" end="/(?{end}&#34;)/"/>

	<inherit scheme="type-block"/>

	<inherit scheme="script-block"/>
	<inherit scheme="paren-block"/>
	<inherit scheme="index-block"/>

	<inherit scheme="Cmdlet"/>

	<inherit scheme="Var"/>

	<inherit scheme="Separator"/>

	<inherit scheme="Pipeline"/>

	<inherit scheme="Number"/>

	<inherit scheme="WOperator"/>

	<inherit scheme="if-block"/>
	<inherit scheme="else-block"/>
	<inherit scheme="elseif-block"/>

	<inherit scheme="foreach-block"/>
	<inherit scheme="for-while-block"/>
	<inherit scheme="switch-block"/>
	<inherit scheme="do-block"/>
</scheme>

<scheme name="ps2">
	<inherit scheme="SOperator"/>
	<regexp match="/(?{Operator}\-[a-zA-Z]?!)/"/>

	<!--Identifier, silly-->
	<regexp match="/(?{Identifier}[\w\-.]+)/"/>
</scheme>

<scheme name="expression">
	<inherit scheme="ps1"/>
	<inherit scheme="ps2"/>
</scheme>

<scheme name="common">
	<inherit scheme="function-block"/>
	<inherit scheme="try-finally-block"/>
	<inherit scheme="catch-trap-block"/>
	<inherit scheme="data-block"/>

	<regexp match="/%s-common;(?{Keyword}break|continue|default|exit|return|throw)\b/i"/>

	<regexp match="/(?{def:Outlined}(?:^|[;\{}]?#1)\s*(?{Keyword}task)\s+=?!(?{Identifier}[^$'&#34;()\{}]\S*)?)/i"/>

	<inherit scheme="ps2"/>
</scheme>

<scheme name="code">
	<inherit scheme="ps1"/>
	<inherit scheme="common"/>
</scheme>

<scheme name="powershell">
	<inherit scheme="log-block"/>

	<inherit scheme="ps1"/>

	<inherit scheme="param-block"/>
	<inherit scheme="named-block"/>

	<inherit scheme="common"/>
</scheme>
</type>
</hrc>
<!--
LICENSE
- Version: MPL 1.1/GPL 2.0/LGPL 2.1
-
- The contents of this file are subject to the Mozilla Public License Version
- 1.1 (the "License"); you may not use this file except in compliance with
- the License. You may obtain a copy of the License at
- http://www.mozilla.org/MPL/
-
- Software distributed under the License is distributed on an "AS IS" basis,
- WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
- for the specific language governing rights and limitations under the
- License.
-
- The Original Code is the Colorer Library.
-
- The Initial Developer of the Original Code is
- Cail Lomecb <cail@nm.ru>.
- Portions created by the Initial Developer are Copyright (C) 1999-2005
- the Initial Developer. All Rights Reserved.
-
- Contributor(s):
- Roman Kuzmin
-
- Alternatively, the contents of this file may be used under the terms of
- either the GNU General Public License Version 2 or later (the "GPL"), or
- the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
- in which case the provisions of the GPL or the LGPL are applicable instead
- of those above. If you wish to allow use of your version of this file only
- under the terms of either the GPL or the LGPL, and not to allow others to
- use your version of this file under the terms of the MPL, indicate your
- decision by deleting the provisions above and replace them with the notice
- and other provisions required by the LGPL or the GPL. If you do not delete
- the provisions above, a recipient may use your version of this file under
- the terms of any one of the MPL, the GPL or the LGPL.
-->
