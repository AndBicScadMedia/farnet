.Language=English,English (English)
.PluginContents=FarNet
.Options TabSize=4

@Contents
$#FarNet#

#FarNet facilities#

	~Menu~@Menu@
	~Panels menu~@MenuPanels@
	~Config menu~@MenuConfig@

#User interface features#

	~List menu~@ListMenu@
	~Input filter~@InputFilter@

#FarNet plugins#

    ~PowerShellFar~@<..\..\FarNet\Modules\PowerShellFar\>Contents@


@Menu
$#Menu#
~Contents~@Contents@

FarNet shows its menu item ".NET" in all Far plugin menus and in the disk menu.

#Disk#

It shows the ~Panels menu~@MenuPanels@.

#Panels#

It shows the ~Panels menu~@MenuPanels@.

#Config#

It shows the ~Config menu~@MenuConfig@.

#Editor, Viewer, Dialog#

It does nothing when selected manually, but this item is used internally for
important feature "PostStep" which works in these areas, too.


@MenuPanels
$#Panels menu#
~Contents~@Contents@

#Push/Shelve the panel#

If the current panel is any FarNet plugin panel then you can push it to the
internal shelve for later use. The pushed panel is replaced with a Far file
panel.

If the current panel is a Far file panel then you can shelve it: to remember
its path, current and selected items, sort and view modes. The shelved panel
remains current.

You can push/shelve any number of panels and pop/unshelve them later.

#Switch full screen#

This command allows to switch "full screen" mode for any view mode of any
FarNet plugin panel. Thus, you may actually use 20 modes = 10 as usual + 10
the same with switched "full screen".

#Close the panel#

Closes the plugin panel. It can be any plugin: FarNet or native. Some plugin
panels may not close on this command. For native plugins original Far panel
state may be not restored on closing.

#Pop/Unshelve [Enter]#

If there are previously pushed/shelved panels then this menu shows titles of
these panels. When you select one then the selected panel is restored and its
original current item, selected items, sort and view modes normally should be
restored, too.

Pushed FarNet panels are popped, i.e. removed from the internal shelve. Shelved
Far panels are unshelved, i.e. not removed from the shelve, they are kind of
panel bookmarks that can be used several times.

#Pop/Unshelve [Del]#

Removes the selected shelved panel information from the internal shelve. It is
ignored if the selected item is not a shelved panel.


@MenuConfig
$#Config menu#
~Contents~@Contents@

This menu allows to select and configure FarNet command plugins, tool plugins
(by areas), file plugins, and set plugin module options.

#Command plugins# : shows the ~Configure command plugins~@ConfigCommand@ menu.

#Editor plugins# : shows the ~Configure editor plugins~@ConfigEditor@ menu.

#Filer plugins# : shows the ~Configure filer plugins~@ConfigFiler@ menu.

#Panels tools# : shows the ~Configure tool plugins~@ConfigTool@ menu for Panels area.

#Editor tools# : shows the ~Configure tool plugins~@ConfigTool@ menu for Editor area.

#Viewer tools# : shows the ~Configure tool plugins~@ConfigTool@ menu for Viewer area.

#Dialog tools# : shows the ~Configure tool plugins~@ConfigTool@ menu for Dialog area.

#Config tools# : shows the ~Configure tool plugins~@ConfigTool@ menu for Config area.

#Disk tools# : shows the ~Configure disk tools~@ConfigDisk@ menu.

#UI culture# : shows the ~Module UI culture~@ConfigUICulture@ menu.


@ConfigTool
$#Configure tool plugins#
~Contents~@Contents@

This menu and the input box allow to edit FarNet plugin strings shown in the
Far plugins menus (F11) in Panels, Editor, Viewer and Dialog areas.

[#Enter#] (menu)

Opens the input box where you can change the selected menu string.

#Input box#

In the input box you change the selected menu string. Use an ampersand to define
a hotkey. If you enter an empty string then the very original menu string will
be restored.

#.NET hotkeys#

It is recommended to set the main .NET hotkey as usual by F4 and to set other
FarNet hotkeys by ampersands using this way: Options \ Plugins configuration \
 .NET \ Panels tools | Editor tools | Viewer tools.


@ConfigCommand
$#Configure command plugins#
~Contents~@Contents@

This menu and the input box allow to edit FarNet plugin command line prefixes.

[#Enter#] (menu)

Opens the input box where you can change the selected prefix.

#Input box#

In the input box you change the selected prefix. If you enter an empty string
then the default plugin prefix is restored.


@ConfigEditor
$#Configure editor plugins#
~Contents~@Contents@

This menu and the input box allow to edit editor plugin file masks.

[#Enter#] (menu)

Opens the input box where you can change the file mask.

#Input box#

In the input box you change the file mask, see ~File masks~@:FileMasks@, exclude
masks are supported (i.e. <include>|<exclude>). If you enter an empty string
then the default plugin mask is restored.


@ConfigFiler
$#Configure filer plugins#
~Contents~@Contents@

This menu and the input box allow to edit file plugin file masks.

[#Enter#] (menu)

Opens the input box where you can change the file mask.

#Input box#

In the input box you change the file mask, see ~File masks~@:FileMasks@, exclude
masks are supported (i.e. <include>|<exclude>). If you enter an empty string
then the default plugin mask is restored.


@ConfigDisk
$#Configure disk tools#
~Contents~@Contents@

This menu only shows the list of disk tools. There is nothing to configure.


@ConfigUICulture
$#Module UI culture menu#
~Contents~@Contents@

This menu and the input box allow to set FarNet plugin module UI cultures
needed for localization. It makes sense if a plugin provides more than one
localized .resources files and you want to set its UI to a culture different
from the current Far UI culture.

[#Enter#] (menu)

Opens the input box where you can change the culture.

#Input box#

Enter a new culture name. Empty name tells to use the current Far UI culture.


@ListMenu
$#List menu#
~Contents~@Contents@

This is basic description of all list menus. Actual keys and operations depend
on properties set by a plugin.

[#Enter#]

Selects the current item and closes the menu. The selected item is processed by
a caller. Example: command history: the selected command is invoked.

[#CtrlEnter#]

Recommended key for an alternative action, i.e. it selects the current item,
closes the menu and the item is processed by a caller in alternative way.
Example: command history: the selected command is inserted into the command
line.

[#Del#]

Recommended key for removing item(s) from the menu. Example: command history:
removes duplicated commands or removes the current command and etc.

[#CtrlDown#]

Recommended key to open an input filter dialog (if permanent filter is enabled).
Note that in this case #AltDown# does the same if you use this popular macro
(addon AltDown.reg). See also ~Input filter~@InputFilter@.

#Symbols#

Applies incremental filter immediately on typing (if incremental filter is
enabled). By default symbols * and ? are wildcards.

[#BS#]

Removes the last symbol from the current incremental filter pattern.

[#ShiftBS#]

Removes the incremental filter string completely.

[#CtrlC#], [#CtrlIns#]

Copies the current item text to the clipboard.


@InputFilter
$#Input filter#
~Contents~@Contents@

Input box for a filter pattern. Pattern type depends on a sub-plugin or its
settings. Available types:

 #Regex#
 #Regex, Literal#

 regex - standard regular expression
 ?text - text is a prefix where * and ? are wildcards or #Literal#
 *text - text is a substring where * and ? are wildcards or #Literal#

 #Prefix#
 #Prefix, Literal#

 Pattern is a prefix where * and ? are wildcards or #Literal#

 #Substring#
 #Substring, Literal#

 Pattern is a substring where * and ? are wildcards or #Literal#
