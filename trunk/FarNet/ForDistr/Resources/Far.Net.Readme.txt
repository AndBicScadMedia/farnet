
	Far.Net


Плагин для написания плагинов для Far Manager на .NET языках.
Использует объектную модель, аналогичную модели плагина SHPCE.


	0. Требования


- Far Manager (протестировано с версией 1.71.2169)
- .NET 2.0


	0. Установка


Стандартная - переписать содержимое папки в "C:\Program Files\Far". Если хотите
изменить положение Plugins.NET или lib, отразите в Far.exe.config. Plugins.NET с
примерами без надобности можно не копировать, чтобы не усложнять поиск плагинов
в этой папке при загрузке.


	0. Структура


- Plugins\Far.Net\FarNetPlugin.dll - собственно реализация плагина для Far.
- lib - в этой папке находятся библиотеки плагина (прописана в Far.exe.config).
- lib\FarDotNetStruct.dll - объекты, которые легче было реализовать на C#.
- lib\FarNetIntf.dll - интерфейс FarManager - объектная модель типа SHPCE.
- lib\FarNetIntf.xml - XML документация, например, для VS Object Browser.
- lib\FarPluginsLoader.dll - загрузчик Far.Net плагинов.
- Plugins.Net - папка с плагинами. Каждый плагин представляет собой папку с
подпапками bin (сборки) и cfg (конфигурационные файлы):
- cfg\plugin.cfg - конфигурационный файл. Каждая строка - последовательность
	<Сборка> <Класс1> <Класс2> ... <КлассN>, где:
		<Сборка> - название сборки в папке bin
		<Классi> - название класса в этой сборке


	0. Алгоритм загрузки плагинов


Для всех папок находящихся в директории Plugins.NET:
- если есть cfg\plugin.cfg - загрузить плагин согласно конфигу;
- если нет, то грузить все *.dll из bin, из которых присоединять к Far
неабстрактные классы, реализующие IPlugin;
- если папки bin нет - грузить все dll из самой папки плагина.


	0. XML документация


Прилагаемая XML документация - это, может, и не оптимальная форма документации,
но зато в ней отражены все последние изменения.

Visual Studio Object Browser автоматически отображает XML комментарии вполне
неплохо. Но еще более удобно воспользоваться великолепной бесплатной программой
Reflector for .NET http://www.aisto.com/roeder/dotnet/, которая отображает help
в стиле MSDN документации и обеспечивает отличную навигацию и удобный поиск по
объектам (включая и сам .NET и вообще любые .NET сборки). Напоминание: следует
открыть в Reflector FarNetIntf.dll, XML документация зачитается автоматически,
если в опциях поставить галку для "Show XML Doc Comments".


	0. История изменений


3.2.6

- Новые свойства и методы: IMenuItem.Data, IMenu.SelectedData,
IPanel.NumericSort, IFar.SetUserScreen(), ICommandLine.Insert().
- Тип свойства IEditor.ExpandTabs теперь не bool, а enum ExpandTabsMode.
- Более подробная информация для некоторых типов исключений, например, файл,
строка и позиция ошибки в PowerShell скрипте.

3.2.5

- Незначительные изменения в функциональности IMenu и ISelection, но есть и
исправление потенциального падения Far при неаккуратных координатах.

3.2.4

ФУНКЦИОНАЛЬНОСТЬ

- функциональность редактора для работы с текстом реализована практически
полностью, если что-то не работает, то это уже не временная недоделка, а
недосмотр или ошибка, можно жаловаться.
- добавлен метод IEditor.Bookmarks(), возвращающий текущий набор закладок.
- в IPanel добавлено много новых свойств, в основном get, но Path - это
get\set, что позволяет менять текущую папку панели.
- добавлен интерфейс ICommandLine и свойство IFar.CommandLine, позволяет
получить\установить содержимое командной строки через свойство Text.
- в папке примеров добавлены Build-CS.bat, Build-JS.bat, Build-VB.bat
облегчающие сборку плагинов без наличия Visual Studio и т.п. под рукой.
- примеры плагинов адаптированы к последним изменениям в Far.Net и заодно
показывают, как можно использовать скрипты Build-*.bat для сборок.

ИЗМЕНЕНИЯ В ИНТЕРФЕЙСЕ (в том числе "breaking changes")

- IFar.Editor теперь возвращает null, если нет текущего редактора, для создания
нового редактора используйте только явный способ: IFar.CreateEditor().
- IFar.AnyEditor возвращает интерфейс IAnyEditor, а не IEditor. IEditor теперь
порожден из IAnyEditor. Возможно, это чисто техническая информация, которая
изменений в коде и логике не потребует.
- IEditor.Editors() возвращает ICollection<IEditor>, а не IList<IEditor>, так
как большинство операций IList для этого набора не предполагается.
- некоторые свойства IFar.Editor работают только для еще неоткрытого или уже
закрытого редактора, некоторые только для открытого и текущего редактора, все
отражено в XML документации. Если это нарушается - ловите исключения.
- Свойство Overtype перемещено из ICursor в IEditor, то есть ICursor теперь
отвечает только за описание позиции, а Overtype - это состояние редактора.
- удален метод ILine ILines.Get(int), полезный только до перехода на generics
коллекции; вместо него используйте семантику массива с индексом или Item.
- удалено свойство IEditor.Text, как дублирующее IEditor.Lines.Strings, которым
(последним) и следует пользоваться.
- свойство IStrings Text в ILines переименовано в Strings.
- свойства AsString переименованы в Text, т.е. теперь Text - это везде string.
- некоторые переименования в соответствии с рекомендуемым .NET стилем имен:
EOL -> Eol, ID -> Id, Cr -> InsertLine.
- удален вспомогательный интерфейс IPostParams, поскольку практически ни новых
удобств, ни функциональности он не добавляет. Если это не так, убедите - будет
восстановлен.
- IPanel: то, что не реализовано, убрано из интерфейса, чтобы не заблуждать, в
основном, свойства сделаны только для чтения, что пока соответствует ситуации.

3.2.3
- реализована основная функциональность редактора через списки текстовых строк и
строк-объектов.
- все коллекции типизированы, то есть стали generic.
- все обработчики событий сделаны стандартными, то есть типа (object sender,
..EventArgs e).

3.2.1
- исправлено выделение в редакторе (возвращало только одну строку)
- доработка под .NET 2.0 и несколько исправлений

3.1.? и ранее

* 29.08.06 - перекомпиляция под .NET 2.0
* 19.08.05 - начала бета стадии
* исправлена куча ошибок в редакторе
* изменен способ загрузки плагинов
* добавлен IFar.RegisterPluginsMenuItem(name, onclick)
* добавлен IMenuItems.Add(name, onclick)
* FarNetIntf.dll прокомментирован xml comments
* 11.08.05 - начала альфа стадии
* Добавлена настройка расположения папки плагинов в Far.exe.config
* Дореализован редактор
* В интерфейс ILines добавлен метод GET, который аналогичен свойству Item за
исключением того, что возвращаемый тип - ILine а не Object
* В комплект поставки добавлены плагины: CopyShared, JS.NetCalc, ReplaceSlashes
* 19.07.05 - начало реализации редактора, исправлено несколько багов в панели
* 16.05.05 - реализован весь функционал SHPCE 2.0 кроме редатора
