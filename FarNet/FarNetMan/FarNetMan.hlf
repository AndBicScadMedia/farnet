.Language=English,English (English)
.PluginContents=FarNet
.Options TabSize=4

@Contents
$#FarNet#

#FarNet menus#

	~Plugin menu~@Menu@
	~Panels menu~@MenuMain@
	~Config menu~@MenuConfig@

#User interface features#

	~List menu~@ListMenu@
	~Input filter~@InputFilter@

#FarNet modules#

    ~PowerShellFar~@<..\..\FarNet\Modules\PowerShellFar\>Contents@


@Menu
$#Plugin menu#
~Contents~@Contents@

FarNet shows its menu items #.NET# in all Far plugin menus [F11].

#Panels, Editor, Viewer#

It shows the ~.NET tools menu~@MenuMain@.

#Config#

It shows the ~Config menu~@MenuConfig@.

#Dialog#

It does nothing when selected manually. It is used internally and cannot be
removed, it allows to bypass some natural limitations of Far API.


@MenuMain
$#.NET tools menu#
~Contents~@Contents@

#Editors/Viewers...#

These menus show the lists of opened editors/viewers sorted by the most recent
activity. E.g. the first item is the current editor/viewer, the second item is
the previously active and so on.

#Push/Shelve the panel#

If the current panel is a FarNet panel then you can push it to the internal
shelve for later use. The pushed panel is replaced with a Far file panel.

If the current panel is a Far file panel then you can shelve it: to remember
its path, current and selected items, sort and view modes. The shelved panel
remains current.

You can push/shelve any number of panels and pop/unshelve them later.

#Switch full screen#

This command switches the full screen mode for any view mode of any FarNet
panel. Thus, you may actually use 20 modes = 10 as usual + 10 the same with
switched full screen.

#Close the panel#

Closes the active plugin panel. It can be any plugin: FarNet or native. Some
plugin panels may not close on this command. For native plugins original Far
panel state is not restored on closing.

#Pop/Unshelve [Enter]#

If there are previously pushed/shelved panels then this menu shows titles of
these panels. When you select one then the selected panel is restored and its
original current item, selected items, sort and view modes normally should be
restored, too.

Pushed FarNet panels are popped, i.e. removed from the internal shelve. Shelved
Far panels are unshelved, i.e. not removed from the shelve, they are kind of
panel bookmarks that can be used several times.

#Pop/Unshelve [Del]#

Removes the selected shelved panel information from the internal shelve. It is
ignored if the selected item is not a shelved panel.


@MenuConfig
$#Config menu#
~Contents~@Contents@

This menu allows to configure FarNet module tools:
commands, editors, filers, menus, and to set module options.

#Menu tools# : shows the ~Configure menu tools~@ConfigTool@ menu.

#Commands# : shows the ~Configure commands~@ConfigCommand@ menu.

#Editors# : shows the ~Configure editors~@ConfigEditor@ menu.

#Filers# : shows the ~Configure filers~@ConfigFiler@ menu.

#UI culture# : shows the ~Module UI culture~@ConfigUICulture@ menu.


@ConfigTool
$#Configure menu tools#
~Contents~@Contents@

This menu and the dialogs allow to set the .NET menu hotkeys and to disable and
re-enable default areas where tool menu items are shown.

[#Enter#] (menu)

Opens the dialog where you can set the hotkey and switch the default areas.

#Dialog#

Set or change the .NET menu hotkey. Enter an empty string to drop the hotkey.
Disable or re-enable the default areas where the tool menu items are shown.

#.NET and other FarNet hotkeys#

It is recommended to set the main .NET hotkey (the FarNet plugin itself) as
usual by [F4] and to set FarNet module hotkeys not by [F4] but using this way:

	#Options \ Plugins configuration \ .NET \ Menu tools#


@ConfigCommand
$#Configure commands#
~Contents~@Contents@

This menu and the input box allow to edit FarNet module command line prefixes.

[#Enter#] (menu)

Opens the input box where you can change the selected prefix.

#Input box#

In the input box you change the selected prefix. If you enter an empty string
then the default prefix is restored.


@ConfigEditor
$#Configure editors#
~Contents~@Contents@

This menu and the input box allow to edit module editor file masks.

[#Enter#] (menu)

Opens the input box where you can change the file mask.

#Input box#

In the input box you change the file mask, see ~File masks~@:FileMasks@, exclude
masks are supported (i.e. <include>|<exclude>). If you enter an empty string
then the default mask is restored.


@ConfigFiler
$#Configure filers#
~Contents~@Contents@

This menu and the input box allow to edit module filer file masks.

[#Enter#] (menu)

Opens the input box where you can change the file mask.

#Input box#

In the input box you change the file mask, see ~File masks~@:FileMasks@, exclude
masks are supported (i.e. <include>|<exclude>). If you enter an empty string
then the default mask is restored.


@ConfigUICulture
$#Module UI culture menu#
~Contents~@Contents@

This menu and the input box allow to set FarNet module UI cultures needed for
localization. It makes sense if a module provides more than one localized
*.resources files and you want to set its UI to a culture different from the
current Far UI culture.

[#Enter#] (menu)

Opens the input box where you can change the culture.

#Input box#

Enter a new culture name. Empty name tells to use the current Far UI culture.


@ListMenu
$#List menu#
~Contents~@Contents@

This is basic description of all list menus. Actual keys and operations depend
on properties set by a module.

[#Enter#]

Selects the current item and closes the menu. The selected item is processed by
a caller. Example: command history: the selected command is invoked.

[#CtrlEnter#]

Recommended key for an alternative action, i.e. it selects the current item,
closes the menu and the item is processed by a caller in alternative way.
Example: command history: the selected command is inserted into the command
line.

[#Del#]

Recommended key for removing item(s) from the menu. Example: command history:
removes duplicated commands or removes the current command and etc.

[#CtrlDown#]

Recommended key to open an input filter dialog (if permanent filter is enabled).
Note that in this case #AltDown# does the same if you use this popular macro
(addon AltDown.reg). See also ~Input filter~@InputFilter@.

#Symbols#

Applies incremental filter immediately on typing (if incremental filter is
enabled). By default symbols * and ? are wildcards.

[#BS#]

Removes the last symbol from the current incremental filter pattern.

[#ShiftBS#]

Removes the incremental filter string completely.

[#CtrlC#], [#CtrlIns#]

Copies the current item text to the clipboard.


@InputFilter
$#Input filter#
~Contents~@Contents@

Input box for a filter pattern. Pattern type depends on a module or its
settings. Available types:

 #Regex#
 #Regex, Literal#

 regex - standard regular expression
 ?text - text is a prefix where * and ? are wildcards or #Literal#
 *text - text is a substring where * and ? are wildcards or #Literal#

 #Prefix#
 #Prefix, Literal#

 Pattern is a prefix where * and ? are wildcards or #Literal#

 #Substring#
 #Substring, Literal#

 Pattern is a substring where * and ? are wildcards or #Literal#
